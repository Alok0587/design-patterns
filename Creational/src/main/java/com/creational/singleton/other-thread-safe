1. Synchronized Method:
This approach synchronizes the getInstance method to ensure that only one thread can execute it at a time.

public class ThreadSafeSingleton {
    private static ThreadSafeSingleton instance;

    private ThreadSafeSingleton() {
        // Initialize the instance
    }

    public static synchronized ThreadSafeSingleton getInstance() {
        if (instance == null) {
            instance = new ThreadSafeSingleton();
        }
        return instance;
    }
}
2. Double-Checked Locking:
This approach reduces the overhead of synchronization by first checking if the instance is null before synchronizing.

public class ThreadSafeSingleton {
    private static volatile ThreadSafeSingleton instance;

    private ThreadSafeSingleton() {
        // Initialize the instance
    }

    public static ThreadSafeSingleton getInstance() {
        if (instance == null) {
            synchronized (ThreadSafeSingleton.class) {
                if (instance == null) {
                    instance = new ThreadSafeSingleton();
                }
            }
        }
        return instance;
    }
}
3. Bill Pugh Singleton Design:
This approach uses a static inner helper class to ensure thread safety and lazy initialization.

public class ThreadSafeSingleton {
    private ThreadSafeSingleton() {
        // Initialize the instance
    }

    private static class SingletonHelper {
        private static final ThreadSafeSingleton INSTANCE = new ThreadSafeSingleton();
    }

    public static ThreadSafeSingleton getInstance() {
        return SingletonHelper.INSTANCE;
    }
}
Explanation:
Synchronized Method: The getInstance method is synchronized, ensuring that only one thread can access it at a time. This approach is simple but can be slow due to the synchronization overhead.
Double-Checked Locking: This approach checks if the instance is null before and after acquiring the lock, reducing the synchronization overhead. The volatile keyword ensures that multiple threads handle the instance variable correctly.
Bill Pugh Singleton Design: This approach leverages the Java class loading mechanism to ensure that the instance is created in a thread-safe manner. The inner static class is not loaded until the getInstance method is called, ensuring lazy initialization.
Use Cases:
Configuration Settings: Ensuring that configuration settings are loaded only once and shared across multiple threads.
Logging: Providing a single instance of a logger that can be used by multiple threads.
Caching: Managing a cache that is accessed by multiple threads.
Thread Pool: Managing a pool of threads that are shared across the application.
Database Connection: Ensuring a single database connection instance is used across multiple threads.
